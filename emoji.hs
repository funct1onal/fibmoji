module Main where


main :: IO ()
main = return()
(ğŸ”¥) :: (a -> b -> c) -> [a] -> [b] -> [c] --zipwith
(ğŸ”¥) _ [] _ = []  
(ğŸ”¥) _ _ [] = [] 
(ğŸ”¥) f (x:xs) (y:ys) = f x y : (ğŸ”¥) f xs ys
(ğŸ˜ˆ) = (\ (_:xs) -> xs) -- lambda tail 
(ğŸ˜‚) :: [Integer]  -- thinking face is fib
(ğŸ’ª) = (+)
(ğŸ˜‚) = 0 : 1 : (ğŸ”¥) (ğŸ’ª) (ğŸ˜‚) ((ğŸ˜ˆ) (ğŸ˜‚))
